<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://queb.fun</id>
    <title>千木岛</title>
    <updated>2022-03-30T15:22:22.767Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://queb.fun"/>
    <link rel="self" href="https://queb.fun/atom.xml"/>
    <subtitle>如梦似幻</subtitle>
    <logo>https://queb.fun/images/avatar.png</logo>
    <icon>https://queb.fun/favicon.ico</icon>
    <rights>All rights reserved 2022, 千木岛</rights>
    <entry>
        <title type="html"><![CDATA[记重新安装windows下GPG踩到的坑]]></title>
        <id>https://queb.fun/post/6BdNLNPya/</id>
        <link href="https://queb.fun/post/6BdNLNPya/">
        </link>
        <updated>2022-03-30T15:19:45.000Z</updated>
        <content type="html"><![CDATA[<p>前段时间在新环境上配置gpg时,下意识安装了win4gpg.然后在从Canokey导入私钥的时候遇到了gpg行为十分怪异的情况.</p>
<p>检查之后发现是因为 windows git ,如果选择使用git捆绑的openSSH的话,他会自己带一个gpg.导致和win4gpg互相干扰</p>
<p>卸载掉win4gpg 之后,重新 fetch卡片就解决了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Valtio 笔记其一：正交的状态管理]]></title>
        <id>https://queb.fun/post/a2XFsdfwX/</id>
        <link href="https://queb.fun/post/a2XFsdfwX/">
        </link>
        <updated>2022-02-24T19:01:35.000Z</updated>
        <summary type="html"><![CDATA[<p><img src="https://s6.jpg.cm/2022/02/25/LgeuwS.jpg" alt="https://twitter.com/cbaohltred/status/1469072112270802944" loading="lazy"><br>
研究了两天，尝试用 Valtio 重构之前的一个项目，有了一些收获</p>
]]></summary>
        <content type="html"><![CDATA[<p><img src="https://s6.jpg.cm/2022/02/25/LgeuwS.jpg" alt="https://twitter.com/cbaohltred/status/1469072112270802944" loading="lazy"><br>
研究了两天，尝试用 Valtio 重构之前的一个项目，有了一些收获</p>
<!-- more -->
<pre><code class="language-ts">//a.ts
const stateA = proxy({
  id: 0,
  get activeID() {
    return state.id
  },
  active: (id: number) =&gt; {
    state.id = id
  },
})

//b.ts
const stateB = proxy({
  fState: ref(stateA),
  testChange: ()=&gt;{
    console.log('其他的state可以互相引用修改');
    
    state.fState.active(4)
  }
})
</code></pre>
<p>Valtio 好就好在可以用一个非常简单的模式完成 state 和 UI 的解耦，因为 state<br>
本身是可变的，所以可以尽情的利用原生js的特性操作。不会有react额外的噪音。对于react的使用，我选择把所有可能的操作都封装为 hooks ，这样就尽可能的保证了 UI 的逻辑无关</p>
<pre><code class="language-ts">//a.ts
const stateA = proxy({
  id: 0,
  get activeID() {
    return state.id
  },
  active: (id: number) =&gt; {
    state.id = id
  },
})

export function useStateA() {
  const _state = useSnapshot(stateA)
  return _state
}

//需要的生命周期 Hooks 和state封装在一起
export function useIDUpdate() {
  const _state = useSnapshot(stateA)

  useEffect(() =&gt; {
    foo().then((res) =&gt; {
      state.active(res)
    })
  }, [])

  return state.activeID
}
</code></pre>
<p>非常干净，非常清爽，非常强大。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我中意的React解决方案]]></title>
        <id>https://queb.fun/post/TnY6CCAgp/</id>
        <link href="https://queb.fun/post/TnY6CCAgp/">
        </link>
        <updated>2022-02-21T08:33:51.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://s6.jpg.cm/2022/02/21/LflaxW.md.jpg" alt="LflaxW.md.jpg" loading="lazy"></figure>
<p>一些在我调查和实际生产中比较喜欢的解决方案</p>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://s6.jpg.cm/2022/02/21/LflaxW.md.jpg" alt="LflaxW.md.jpg" loading="lazy"></figure>
<p>一些在我调查和实际生产中比较喜欢的解决方案</p>
<!-- more -->
<h2 id="状态管理">状态管理</h2>
<h3 id="mobx"><a href="https://mobx.js.org/">Mobx</a></h3>
<p>目前用的最多的解决方案，对FC的支持也不错。问题在于必须使用observer包裹组件，而且兼容性不强</p>
<h3 id="immer"><a href="https://immerjs.github.io/immer/">Immer</a></h3>
<p>Mobx作者新搞的小玩具，实用性一般，因为要修改必须从顶级state的draft开始访问，否则不能正确响应。但是思路还是很好的，工程量不大的小项目小组件可以试试看</p>
<h3 id="valtio"><a href="https://github.com/pmndrs/valtio">Valtio</a></h3>
<p>最近发现的新玩具，似乎是最符合我信息的解决方案了，还没有试过但是很感兴趣，用过之后遇到问题会再写后续文章</p>
<h2 id="路由">路由</h2>
<h3 id="react-router">react-router</h3>
<p>不用多说，官方推荐。不是非常易用但是足够好用，也懒得折腾更多了，之前有段时间（大概是5.0左右？）对hooks的支持很差所以尝试了其他的解决方案，现在支持还不错就换回来了。</p>
<h3 id="react-hook-router"><a href="https://github.com/Paratron/hookrouter">React Hook Router</a></h3>
<p>这就是当初用过的方案，现在不再推荐了因为 react-router 已经很好了，而且这个作者不喜欢TS所以这方面的支持也不太好，而且很久没更新了。但作为一个小型router的实现代码是值得学习的。</p>
<h2 id="css">CSS</h2>
<h3 id="emotionjs">emotionJS</h3>
<p>目前在用的，除了 <code>css props</code> 我颇有微词以外，其他的部分都算完美，<code>css-in-js</code>保证了样式的可控性（我知道大部分时候用不到，但是用得到的时候还是很爽的），使用完整的CSS/SCSS语法而不是什么<code>Tailwind</code>黑科技。库很小而且泛用性很高。本质上这东西和<code>styled</code>是一家子所以代码也很容易迁移。平台支持广：虽然理论上这东西支持RN但属实没必要。</p>
<h3 id="styled-jsx">styled-jsx</h3>
<p>呃，这东西就比较微妙了。首先他是需要babel支持的，这意味着在某些你不想用，或者不能用babel的场合这东西就跪了。与emotion相比实际上我更喜欢styled的写法，即把style单独写在一个标签里面然后用<code>scoped css</code>限制他的作用域，但是styled-jsx是不建议注入子组件的样式的，我不赞同这个设计。所以权衡之后放弃了这东西。btw <code>next.js</code> 默认用的这个。说明还是有相当一部分人喜欢 <code>shadow-css</code> 设计的。看个人喜好和具体业务场景了。</p>
<h3 id="material-uistyle">@material-ui/style</h3>
<p>这东西入土了，新的mui用的是emotion，然后保留了之前的api而已。</p>
<h3 id="react-spring">react-spring</h3>
<p>这东西我本来想单独分个动效来说的，但是讲道理好像和CSS重叠的部分还是很广的，也就一并讲了。</p>
<p>很好用，虽然新的api有点反直觉但是能get到他们的设计思路所以我保留意见。实际上这个弹性库并不一定是用来给css的，你可以给任何你想加上可控曲线效果的地方用上。同样支持RN，但没研究过。</p>
<h2 id="canvas">Canvas</h2>
<h3 id="konva">Konva</h3>
<p>比较复杂，这东西其实是新建了一个react实例然后挂载在你的组件树上，所以会有一些奇妙的小问题。但总的来说还是足够好用。暂时找不到比它更方便的canvas库了，或者说更进一步的需求建议用flutter。</p>
<p>先写这么多，想起来什么再补充。</p>
<hr>
<p>题图 <a href="https://twitter.com/kirizieeel/status/1495523468657397762">https://twitter.com/kirizieeel/status/1495523468657397762</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么用了Gridea更新的更少了]]></title>
        <id>https://queb.fun/post/wei-shi-me-yong-liao-gridea-geng-xin-de-geng-shao-liao/</id>
        <link href="https://queb.fun/post/wei-shi-me-yong-liao-gridea-geng-xin-de-geng-shao-liao/">
        </link>
        <updated>2022-02-15T21:01:03.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>为啥啊，<s>当然是因为我懒</s> 因为 Gridea 这种静态博客工具一个难以解决的问题就是怎么备份自己的post。尤其是之前用了hexo更换之后大量的元数据出现了问题，进一步恶化了这件事情。</p>
<p>现在把整个post搬到了坚果云上，如果下次还记得这回事的话应该会稍微，好那么一点吧？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[料理包评测记录]]></title>
        <id>https://queb.fun/post/liao-li-bao-ping-ce-ji-lu/</id>
        <link href="https://queb.fun/post/liao-li-bao-ping-ce-ji-lu/">
        </link>
        <updated>2022-02-15T20:51:45.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://s6.jpg.cm/2022/02/16/LBquTR.jpg" alt="LBquTR.jpg" loading="lazy"></figure>
<p>主要记一下自己吃过的口味还不错的料理包。煮饭什么的最麻烦了</p>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://s6.jpg.cm/2022/02/16/LBquTR.jpg" alt="LBquTR.jpg" loading="lazy"></figure>
<p>主要记一下自己吃过的口味还不错的料理包。煮饭什么的最麻烦了</p>
<!-- more -->
<h2 id="王小余">王小余</h2>
<p>总的来说这家料理包，油和调味用的不错。量比较少，盐中等</p>
<h3 id="肉末外婆菜">肉末外婆菜</h3>
<p>垃圾，别吃。肉末显微镜下可能能看见吧，我视力不好别搞</p>
<h3 id="香菇鸡丁">香菇鸡丁</h3>
<p>这个不错，口感和味道都不错</p>
<h3 id="啤酒鸭">啤酒鸭</h3>
<p>究极垃圾，一股怪味。骨头还多。禽肉还是别料理包了，尤其是带骨头的</p>
<h3 id="武冈香干炒肉">武冈香干炒肉</h3>
<p>实际上就是豆干炒豆干，肉不能说没有吧，但是别指望</p>
<h3 id="巴西烤肉">巴西烤肉</h3>
<p>心中的MVP，好吃就完事了。说起来都是调味料的味道但是都吃料理包了还要什么自行车</p>
<h3 id="青豆炒肉">青豆炒肉</h3>
<p>还可以，炒肉=炒肉末，但好歹也是肉。青豆挺软的味道ok</p>
<p>这家的调味都挺相似的，油分比较大，不过不是油腻的那种。3.5/5</p>
<h3 id="卤肉">卤肉</h3>
<p>其实是卤肉馅，配图如下<br>
<img src="https://imgs.aixifan.com/FqRusdCLr6hVXtGy1UT0PEPoYXrt" alt="好多油.jpg" loading="lazy"></p>
<h3 id="梅菜扣肉">梅菜扣肉</h3>
<p>好吃，量大肉多。差点没吃完。秒了！</p>
<h3 id="香辣土匪鸭">香辣土匪鸭</h3>
<blockquote>
<p>禽肉还是别料理包了，尤其是带骨头的</p>
</blockquote>
<p>虽然这个调味更重口了所以勉强压住了那种恶心的味道，但不行就是不行，别买</p>
<h3 id="五香脆骨">五香脆骨</h3>
<p>脆骨口感不是很好，但是调味尚可。差强人意。</p>
<figure data-type="image" tabindex="2"><img src="https://s6.jpg.cm/2022/02/22/LfFVdD.jpg" alt="" loading="lazy"></figure>
<h2 id="新美香">新美香</h2>
<p>在买上面那个王小余之前我买了挺久这家的。对比之后发现这家的口感很奇怪，像是加了不少增稠剂。但是用料上还是可以的，可能是我没有get到他的好。吃的挺多但是我记不大住了，就随便写几个</p>
<h3 id="台式卤肉-香菇卤肉">台式卤肉 &amp; 香菇卤肉</h3>
<p><strong>咸！</strong> 这个卤肉某种意义上可以算作是浇头。当菜绝对是大材小用了。肉都是小丁丁而且偏肥。如果住了面之类的可以配一下，还不错</p>
<h3 id="咖喱鸡肉">咖喱鸡肉</h3>
<p>除了那个奇怪的勾芡问题以外还可以，鸡肉的口感很松弛但是量还是够的。</p>
<h3 id="鱼香肉丝">鱼香肉丝</h3>
<p>同上，味道还行勾芡怪怪的。</p>
<h3 id="一些带骨肉的菜">一些带骨肉的菜</h3>
<p>统统不推荐，料理包不要买带骨头的，很蠢。</p>
<h3 id="肉末茄子">肉末茄子</h3>
<p>还可以，茄子倒是很适合他这个勾芡。我喜欢。</p>
<hr>
<p>未完待续</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博客迁移到Gridea]]></title>
        <id>https://queb.fun/post/bo-ke-qian-yi-dao-gridea/</id>
        <link href="https://queb.fun/post/bo-ke-qian-yi-dao-gridea/">
        </link>
        <updated>2020-07-13T06:35:29.000Z</updated>
        <content type="html"><![CDATA[<p>Hexo很好,但是我不太懂它的模板语法,而且我懒,所以经过五分钟的调研我选择了 <a href="https://github.com/getgridea/gridea">Gridea</a> 作为博客的框架,然后从里面找了个顺眼的主题</p>
<p>Gridea的快捷键还不是很到位,也不支持<code>Hot Reload</code>,总的来说是能用,但是不算好用的,编辑器本身性能一般,不过我也不太介意,好看还是很好看的,重点是它的自动部署功能,不过我暂时没看到支持ssh,希望支持,否则就不太行了</p>
<p>自定义主题还是算了,有心无力,这一年仍然是饱尝无力感的一年,希望大家平安.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通过NoVpaJpeg.kext解决 macOS Mojave(10.14)下预览jpg格式崩溃]]></title>
        <id>https://queb.fun/post/通过NoVpaJpeg.kext解决 macOS Mojave(10.14)下预览jpg格式崩溃/</id>
        <link href="https://queb.fun/post/通过NoVpaJpeg.kext解决 macOS Mojave(10.14)下预览jpg格式崩溃/">
        </link>
        <updated>2018-11-26T11:02:17.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2018/12/02/5c03976c6e5e0.png" alt="56493506_p0.png" loading="lazy"></figure>
<p>​	黑苹果升级到Mojave(10.14)后，遇到了通过预览打开jpg格式的图片时，预览会崩溃/卡转圈的情况，经过一番摸索，发现原因是预览调用了集显来解码JPG格式，而我因为有独显并没有打开集显。</p>
<p>​	除了通过修改为没有集显的机型SMBIOS 或者开启机器的集显，还有一种方法是在Clover中添加NoVPAJpeg.kext驱动来禁用集显解码。</p>
<p>​	原帖和Github放在了文章下方。</p>
<p>​	实测RX580工作正常。</p>
<p>更多……：</p>
<ul>
<li><a href="https://www.insanelymac.com/forum/topic/334881-how-to-fix-quick-look-and-preview-issues-in-mojave/?page=8">[HOW TO] Fix Quick Look and Preview issues in Mojave</a></li>
<li><a href="https://github.com/vulgo/NoVPAJpeg">NoVPAJpeg</a></li>
<li>题图：id=56493506</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Clover DSDT 笔记]]></title>
        <id>https://queb.fun/post/Clover-DSDT-笔记/</id>
        <link href="https://queb.fun/post/Clover-DSDT-笔记/">
        </link>
        <updated>2018-10-30T12:16:12.000Z</updated>
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=30148963&auto=1&height=66"></iframe>
<p>​	本文是我在研究黑苹果DSDT期间所做的技术笔记，可读性会很差，建议善用搜索功能。</p>
<p>​	Clover修正DSDT的方式主要有两种：Patched 与 hotpatch。hotpatch主要是对原有的属性进行修正，而patched相当于为电脑添加了新的属性。故两者不能混淆。</p>
<p>​	Clover对DSDT热修补(hotpatch)的大致思路是将现有的需要修正的DSDT进行「重命名」，然后制作一个自定的DSDT文件（.aml)。将系统原生的DSDT访问指向自定的文件，然后就可以做到自定义指定DSDT的行为，此处举例：</p>
<pre><code>Comment: Rename _DSM to XDSM
Find: &lt;5f44534d&gt;
Replace: &lt;5844534d&gt;
</code></pre>
<p>注：「_DSM」转为Hex写作&lt;5f44534d&gt;</p>
<p>将系统原生的 _DSM 访问重定向至 XDSM，配合/clover/acpi/hotpatch下的.aml文件就可以拦截处理指定的DSDT。</p>
<p>未完待续……</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[主题修改日志]]></title>
        <id>https://queb.fun/post/主题修改日志/</id>
        <link href="https://queb.fun/post/主题修改日志/">
        </link>
        <updated>2018-08-25T02:13:12.000Z</updated>
        <content type="html"><![CDATA[<p>2018.8.25：</p>
<ul>
<li>暂时修改了部分按钮的颜色——因为根本看不清（<s>但还是很丑，会改的</s>）</li>
<li>将毛玻璃的效果加入了配置文件</li>
</ul>
<p>2018.8.25之前：</p>
<ul>
<li>修改了页面样式</li>
<li>删除了性能堪忧的过渡动画</li>
<li>一些不太记得的东西</li>
</ul>
<p>TODO：</p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2847241"><label class="task-list-item-label" for="task-item-2847241"> 将之前的脏代码整理到合适的地方</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7929735"><label class="task-list-item-label" for="task-item-7929735"> 适配Chrome的毛玻璃效果（JS版）</label></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在hexo页面插入网易云播放器]]></title>
        <id>https://queb.fun/post/在hexo页面插入网易云播放器/</id>
        <link href="https://queb.fun/post/在hexo页面插入网易云播放器/">
        </link>
        <updated>2018-08-23T00:49:33.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://s6.jpg.cm/2022/02/16/LBqbmt.png" alt="LBqbmt.png" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://s6.jpg.cm/2022/02/16/LBqbmt.png" alt="LBqbmt.png" loading="lazy"></figure>
<!-- more -->
<p>最近终于在百(shou)忙(lie)之余想起来还有个博客的事，最近几个月除了把博客搬迁到了gitpage就完全没有理睬这玩意，既然今天想起来了就干脆把之前魔改留下的坑稍微填一下……</p>
<p>为什么会有这篇文章呢，为了让博客看着稍微正常点，我找了关于如何在Md页面中插入HTML的教程，最后发现是原生支持的……那么问题就变成了要在页面上插入些什么东西才好，思前想后果然还是王道征途，音乐控件吧</p>
<p>那么就是惯例的Google，找到了如下的代码：</p>
<pre><code class="language-html">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;320&quot; height=&quot;330&quot; src=&quot;https://music.163.com/outchain/player?type=0&amp;amp;id=24972133&amp;amp;auto=0&amp;amp;height=430&quot;&gt;&lt;/iframe&gt;
</code></pre>
<p>将这行代码直接放在需要的地方就可以实现如下效果的播放器：</p>
<!-- more -->
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="320" height="330" src="https://music.163.com/outchain/player?type=0&amp;id=24972133&amp;auto=0&amp;height=430"></iframe>
<p>&lt;iframe&gt;控件的参数可以从<a href="http://www.w3school.com.cn/tags/tag_iframe.asp">这里</a>看到，可以借助参数来调整控件的外观。不过最重要的还是src部分的参数，将sec部分的‘type’和‘id’部分替换成自己的就可以了<br>
其中：</p>
<ul>
<li>type为0的时候对应的是歌单的id；</li>
<li>type为1的时候对应的是专辑的id；</li>
<li>type为2的时候对应的是单曲的id</li>
</ul>
<p>网易云自带的外链设置：<code>https://music.163.com/#/outchain/_type/_id/m/use/html</code>,将_type和_id改为需要的参数即可。</p>
<p><strong>2018.9.4更新</strong></p>
<p>最近将博客迁移到gitpages后发现此前的播放器不能正常显示，Google后发现是gitpage强制开启了https，而我之前的播放器src用了http……修改后解决</p>
<p><a href="http://saili.science/2017/05/30/music/">参考链接</a></p>
<hr>
<p>题图：Pixiv_PID:70217074</p>
<p>#EOF</p>
]]></content>
    </entry>
</feed>